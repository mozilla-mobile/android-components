# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

version: 1
policy:
  pullRequests: public
tasks:
  $let:
    decision_task_id: {$eval: as_slugid("decision_task")}
    expires_in: {$fromNow: '1 year'}
    user: ${event.sender.login}

    # We define the following variable at the very top, because they are used in the
    # default definition
    head_branch:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.ref}
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.ref}
        else: ${event.release.target_commitish}

    head_rev:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.sha}
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.after}
        else: ${event.release.tag_name}

    push_date_time:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.repo.pushed_at}
      else:
        $if: 'tasks_for == "github-push"'
        then: ${event.repository.pushed_at}
        else: ${event.release.published_at}

    repository:
      $if: 'tasks_for == "github-pull-request"'
      then: ${event.pull_request.head.repo.html_url}
      else: ${event.repository.html_url}

    scheduler_id:
      $if: 'tasks_for == "cron"'
      then: focus-nightly-sched  # TODO: Rename to mobile-nightly-sched
      else: taskcluster-github

    repo_trust_level:
      # Pull requests on main repository can't be trusted because anybody can open a PR on it, without a review
      $if: 'tasks_for in ["github-push", "github-release", "cron"] && event.repository.html_url == "https://github.com/mozilla-mobile/android-components"'
      then: 3
      else: 1

  in:
    $let:
      is_repo_trusted:
        $if: 'repo_trust_level == 3'
        then: true
        else: false

      tasks_priority:
        $if: 'repo_trust_level == 3'
        then:
          $if: 'tasks_for == "github-release"'
          then: highest
          else:
            $if: 'tasks_for == "cron"'
            then: high
            else: medium
        else: lowest

    in:
      $let:
        default_task_definition:
          taskId: ${decision_task_id}
          taskGroupId: ${decision_task_id}  # Must be explicit because of Chain of Trust
          schedulerId: ${scheduler_id}
          created: {$fromNow: ''}
          deadline: {$fromNow: '2 hours'}
          expires: ${expires_in}
          provisionerId: aws-provisioner-v1
          workerType: mobile-${repo_trust_level}-decision
          priority: ${tasks_priority}
          requires: all-completed   # Must be explicit because of Chain of Trust
          retries: 5
          scopes:
            - queue:create-task:${tasks_priority}:aws-provisioner-v1/mobile-${repo_trust_level}-b-andrcmp
            - queue:create-task:${tasks_priority}:aws-provisioner-v1/mobile-${repo_trust_level}-images
            - queue:route:index.project.mobile.android-components.cache.level-${repo_trust_level}.docker-images.v1.*
            - queue:route:statuses
            - queue:scheduler-id:${scheduler_id}
          routes:
            - statuses  # Automatically added by taskcluster-github. It must be explicit because of Chain of Trust
          payload:
            maxRunTime: 600   # Decision should remain fast enough to schedule a handful of tasks
            # XXX Even though this image is built on Taskcluster, we must upload it to Docker hub.
            # The reason is: If we use the one hosted on Taskcluster, Chain of Trust will try to
            # know the origin of docker image up until the very first one. This will become an issue
            # one year after the first image was built: the artifacts will expire and Chain of Trust
            # won't be able to know if the task was valid or not. This is why we keep uploading
            # the docker image on Docker hub. The fact that the image is still built on Taskcluster
            # is just a way of testing the Dockerfile.
            image: mozillamobile/android-components-decision@sha256:7c4a815163ea22aa0df701d463a5764fb0122659b74d52868e662be28bdcb390
            command:
              - /bin/bash
              - --login
              - -cx
              # The rest of the command must be defined below
            env:
              TASK_ID: ${decision_task_id}
              TASKS_PRIORITY: ${tasks_priority}
              SCHEDULER_ID: ${scheduler_id}
              MOBILE_HEAD_REPOSITORY: ${repository}
              MOBILE_HEAD_BRANCH: ${head_branch}
              MOBILE_HEAD_REV: ${head_rev}
              MOBILE_PUSH_DATE_TIME: ${push_date_time}
              TRUST_LEVEL: ${repo_trust_level}
            features:
              taskclusterProxy: true
              chainOfTrust: true  # We sometimes build docker images in non-release graphs. We need to be able to trace them.
            artifacts:
              public/task-graph.json:
                type: file
                path: /build/android-components/task-graph.json
                expires: ${expires_in}
              public/actions.json:
                type: file
                path: /build/android-components/actions.json
                expires: ${expires_in}
              public/parameters.yml:
                type: file
                path: /build/android-components/parameters.yml
                expires: ${expires_in}
          extra:
            tasks_for: ${tasks_for}
          metadata:
            owner: ${user}@users.noreply.github.com
            source: ${repository}/raw/${head_rev}/.taskcluster.yml
      in:
        $if: 'tasks_for in ["github-pull-request", "github-push"]'
        then:
          $let:
            pr_or_push_parameters:
              scopes:
                - secrets:get:project/mobile/android-components/public-tokens
              payload:
                command:
                  - >-
                    git fetch ${repository} ${head_branch}
                    && git config advice.detachedHead false
                    && git checkout ${head_rev}
                    && python automation/taskcluster/decision_task.py pr-or-push
          in:
            - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "edited", "synchronize"]'
              then:
                $let:
                  pull_request_title: ${event.pull_request.title}
                  pull_request_number: ${event.pull_request.number}
                  pull_request_url: ${event.pull_request.html_url}
                in:
                  $mergeDeep:
                    - {$eval: 'default_task_definition'}
                    - {$eval: 'pr_or_push_parameters'}
                    - payload:
                        env:
                          GITHUB_PULL_TITLE: ${pull_request_title}
                          MOBILE_PULL_REQUEST_NUMBER: ${pull_request_number}
                      metadata:
                        name: 'Android Components - Decision task (Pull Request #${pull_request_number})'
                        description: 'Building and testing Android components - triggered by [#${pull_request_number}](${pull_request_url})'
            - $if: 'tasks_for == "github-push" && head_branch[:10] != "refs/tags/"'
              then:
                $mergeDeep:
                  - {$eval: 'default_task_definition'}
                  - {$eval: 'pr_or_push_parameters'}
                  - metadata:
                      name: Android Components - Decision task
                      description: Schedules the build and test tasks for Android components.
        else:
          $if: 'tasks_for in ["github-release", "cron"]'
          then:
            $let:
              command_staging_flag:
                $if: 'is_repo_trusted'
                then: ''
                else: '--staging'

              beetmover_worker_type:
                $if: 'is_repo_trusted'
                then: mobile-beetmover-v1
                else: mobile-beetmover-dev

              beetmover_bucket:
                $if: 'tasks_for == "github-release"'
                then:
                  $if: 'is_repo_trusted'
                  then: maven-production
                  else: maven-staging
                else:
                  $if: 'is_repo_trusted'
                  then: maven-snapshot-production
                  else: maven-snapshot-staging

            in:
              $let:
                nightly_or_release_definition:
                  scopes:
                    - project:mobile:android-components:releng:beetmover:action:push-to-maven
                    - project:mobile:android-components:releng:beetmover:bucket:${beetmover_bucket}
                    - queue:create-task:${tasks_priority}:scriptworker-prov-v1/${beetmover_worker_type}
                  payload:
                    env:
                      BEETMOVER_WORKER_TYPE: ${beetmover_worker_type}
              in:
                - $if: 'tasks_for == "github-release"'
                  then:
                    $let:
                      tag: ${event.release.tag_name}
                    in:
                      $mergeDeep:
                        - {$eval: 'default_task_definition'}
                        - {$eval: 'nightly_or_release_definition'}
                        - payload:
                            command:
                              - >-
                                git fetch ${repository} --tags
                                && git config advice.detachedHead false
                                && git checkout ${tag}
                                && python automation/taskcluster/decision_task.py release --version "${tag}"
                                ${command_staging_flag}
                          metadata:
                            name: Android Components - Decision task (${tag})
                            description: Build and publish release versions.
                - $if: 'tasks_for == "cron"'
                  then:
                    $let:
                      cron_task_id: {$eval: 'cron["task_id"]'}
                    in:
                      $mergeDeep:
                        - {$eval: 'default_task_definition'}
                        - {$eval: 'nightly_or_release_definition'}
                        - payload:
                            command:
                              - >-
                                git fetch ${repository} ${head_branch}
                                && git config advice.detachedHead false
                                && git checkout ${head_rev}
                                && python automation/taskcluster/decision_task.py release --snapshot
                                ${command_staging_flag}
                          extra:
                            cron: {$json: {$eval: 'cron'}}
                          metadata:
                            name: Android Components - Decision task for Snapshot release
                            description: Created by a [cron task](https://tools.taskcluster.net/tasks/${cron_task_id})
