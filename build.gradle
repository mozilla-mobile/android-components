// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // Synchronized version numbers for dependencies used by (some) modules
    ext.dependencies = [
        kotlin: '1.2.31',
        coroutines: '0.19.3',
        supportLibraries: '27.1.1',
        junit: '4.12',
        robolectric: '3.8',
        mockito: '2.12.0'
    ]

    // Synchronized build configuration for all modules
    ext.build = [
        compileSdkVersion: 27,
        targetSdkVersion: 27,
        minSdkVersion: 21
    ]

    // Synchronized library configuration for all modules
    ext.library = [
        version: '0.4'
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.dependencies['kotlin']}"

        // Publish.
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.0.RC6-4")
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    apply plugin: 'jacoco'

    afterEvaluate {
        if (it.hasProperty('android')) {
            android {
                testOptions {
                    unitTests {
                        includeAndroidResources = true
                    }
                }
            }

            if (project.hasProperty("coverage")) {
                tasks.withType(Test) {
                    jacoco.includeNoLocationClasses = true
                    doLast { jacocoTestReport.execute() }
                }

                task jacocoTestReport(type: JacocoReport) {
                    reports {
                        xml.enabled = true
                        html.enabled = true
                    }

                    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                                      '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
                    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
                    def mainSrc = "$project.projectDir/src/main/java"

                    sourceDirectories = files([mainSrc])
                    classDirectories = files([debugTree])
                    executionData = fileTree(dir: project.buildDir, includes: [
                            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
                    ])
                }

                android {
                    buildTypes {
                        debug {
                            testCoverageEnabled true
                        }
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

detekt {
    // The version number is duplicated, please refer to plugins block for more details
    version = "1.0.0.RC6-4"
    profile("main") {
        input = "$projectDir/components"
        config = "$projectDir/config/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        baseline = "$projectDir/config/detekt-baseline.xml"
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.21.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "components/**/*.kt"
}
