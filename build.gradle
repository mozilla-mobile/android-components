// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // Synchronized versions numbers of GeckoView (Nightly) artifacts.
    ext.geckoNightly = [
        // Discover nightly builds: https://tools.taskcluster.net/index/gecko.v2.mozilla-central.nightly
        version: '63.0.20180820100132'
    ]

    // Synchronized versions numbers of GeckoView (Beta) artifacts.
    ext.geckoBeta = [
        // mozilla-beta: FENNEC_62_0b15_RELEASE
        revision: '7ce198bb7ce027d450af3f69a609896671adfab8',
        version: '62.0.20180806191531'
    ]

    ext.geckoRelease = [
        // mozilla-release: FENNEC_61_0_RELEASE
        revision: '785d242a5b01d5f1094882aa2144d8e5e2791e06',
        version: '61.0.20180621125625'
    ]

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath Deps.tools_androidgradle
        classpath Deps.tools_kotlingradle
        classpath Deps.tools_dokka

        // Publish.
        classpath Deps.tools_bintray
        classpath Deps.tools_mavengradle
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.0.RC7-3")
}

allprojects {
    repositories {
        google()
        jcenter()

        maven {
            url "https://maven.mozilla.org/maven2"
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        // GeckoView Beta
        ////////////////////////////////////////////////////////////////////////////////////////////

        // ARM
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-beta.revision.${geckoBeta['revision']}.mobile.android-api-16-opt/artifacts/public/android/maven"
        }

        // x86
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-beta.revision.${geckoBeta['revision']}.mobile.android-x86-opt/artifacts/public/android/maven"
        }

        // aarch64
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-beta.revision.${geckoBeta['revision']}.mobile.android-aarch64-opt/artifacts/public/android/maven"
        }

        ////////////////////////////////////////////////////////////////////////////////////////////
        // GeckoView Release (60.0.2)
        ////////////////////////////////////////////////////////////////////////////////////////////

        // ARM
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-release.revision.${geckoRelease['revision']}.mobile.android-api-16-opt/artifacts/public/android/maven"
        }

        // x86
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-release.revision.${geckoRelease['revision']}.mobile.android-x86-opt/artifacts/public/android/maven"
        }

        // aarch64
        maven {
            url "https://index.taskcluster.net/v1/task/gecko.v2.mozilla-release.revision.${geckoRelease['revision']}.mobile.android-aarch64-opt/artifacts/public/android/maven"
        }
    }
}

subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.dokka-android'

    afterEvaluate {
        if (it.hasProperty('android')) {
            dependencies {
                lintChecks project(':tooling-lint')
            }

            android {
                testOptions {
                    unitTests {
                        includeAndroidResources = true
                    }
                }

                lintOptions {
                    warningsAsErrors true
                    abortOnError true
                }

                task docs(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) {
                    outputFormat = 'javadoc'
                    reportUndocumented = false
                    outputDirectory = "${project.rootDir}/build/javadoc/${project.name}"
                }
            }

            if (project.hasProperty("coverage") && project.name != "support-test") {
                tasks.withType(Test) {
                    jacoco.includeNoLocationClasses = true
                    doLast { jacocoTestReport.execute() }
                }

                task jacocoTestReport(type: JacocoReport) {
                    reports {
                        xml.enabled = true
                        html.enabled = true
                    }

                    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                                      '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
                    def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
                    def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
                    def mainSrc = "$project.projectDir/src/main/java"

                    sourceDirectories = files([mainSrc])
                    classDirectories = files([kotlinDebugTree, javaDebugTree])
                    executionData = fileTree(dir: project.buildDir, includes: [
                            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
                    ])
                }

                android {
                    buildTypes {
                        debug {
                            testCoverageEnabled true
                        }
                    }
                }
            }

            if (it.hasProperty('kotlin')) {
                android {
                    kotlin {
                        experimental {
                            coroutines 'enable'
                        }
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

detekt {
    // The version number is duplicated, please refer to plugins block for more details
    version = "1.0.0.RC7-3"
    profile("main") {
        input = "$projectDir/components"
        config = "$projectDir/config/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        baseline = "$projectDir/config/detekt-baseline.xml"
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.24.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "components/**/*.kt"
}

task printModules {
    doLast {
        subprojects.each { p ->
            println "module: " + p.path
        }
    }
}

task printVersion {
    doLast {
        println("version: " + Config.componentsVersion)
    }
}
