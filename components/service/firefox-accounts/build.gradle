/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.ext.build['compileSdkVersion']

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules-consumer.pro'
        }
    }
}

repositories {
    ivy {
        url 'https://index.taskcluster.net/v1/task/'
        layout 'pattern', {
            artifact '/project.fxaclient.builds.[revision]/artifacts/public/bin/[organisation]/[module]_[revision].[ext]'
        }
    }
}

configurations {
    fxa

    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:${rootProject.ext.dependencies['jna']}@jar"

    fxa "mozilla:fxa_client_android:${rootProject.ext.dependencies['fxa']}@zip"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.dependencies['kotlin']}"
    implementation "net.java.dev.jna:jna:${rootProject.ext.dependencies['jna']}@aar"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.dependencies['coroutines']}"

    testImplementation files(configurations.jnaForTest.files)
    testImplementation "junit:junit:${rootProject.ext.dependencies['junit']}"
    testImplementation "org.robolectric:robolectric:${rootProject.ext.dependencies['robolectric']}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.dependencies['mockito']}"
}

ext.jniOutputDir = "src/main/jniLibs"

task unzipFxaLibs(type: Copy) {
    from configurations.fxa.files.collect { zipTree(it) }
    into jniOutputDir
}
preBuild.dependsOn(unzipFxaLibs)

archivesBaseName = "fxa"

apply from: '../../../publish.gradle'
ext.configurePublish(
        'org.mozilla.components',
        'fxa',
        'A library for integrating with Firefox Accounts.')
