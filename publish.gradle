/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

def libRepoName = properties.libRepositoryName
def libUrl = properties.libUrl
def libVcsUrl = properties.libVcsUrl
def libLicense = properties.libLicense
def libLicenseUrl = properties.libLicenseUrl

// Must match the implementation in components/tooling/glean-gradle-plugin/build.gradle
static def getLocalPublicationTimestamp() {
    def date = new Date()
    return date.format('yyyyMMddHHmmss')
}

ext.configurePublish = { groupIdArg, artifactIdArg, descriptionArg ->
    apply plugin: 'digital.wup.android-maven-publish'

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    publishing {
        publications {
            aar(MavenPublication) {
                from components.android
                artifact sourcesJar

                pom {
                    groupId = groupIdArg
                    artifactId = artifactIdArg
                    description = descriptionArg
                    // 'local' is for streamlining local publication workflow.
                    version = config.componentsVersion + (project.hasProperty('snapshot') ? '-SNAPSHOT' : (project.hasProperty('local') ? '-local' + getLocalPublicationTimestamp() : ''))

                    licenses {
                        license {
                            name = libLicense
                            url = libLicenseUrl
                        }
                    }

                    developers {
                        developer {
                            name = 'Mozilla Android Components Team'
                            email = 'android-components@lists.mozilla.org'
                        }
                    }

                    scm {
                        connection = libVcsUrl
                        developerConnection = libVcsUrl
                        url = libUrl
                    }
                }
            }
        }

        repositories {
            maven {
                url = "$buildDir/maven"
            }
        }
    }

    task renameSnapshotArtifacts(type: Exec) {
        dependsOn publish

        def renameScript = "${rootDir}/automation/taskcluster/rename_snapshot_artifacts.py"
        def mavenBuildDir = "${project.buildDir}/maven"

        commandLine 'python', renameScript, '--path', mavenBuildDir, '--timestamp', (project.hasProperty('timestamp') ? timestamp : '')
    }
}
